#include "UHH2/LQToTopMu/include/TstarToTopMuPDFHists.h"
#include "UHH2/LQToTopMu/include/HypothesisHistsOwn.h"
#include "UHH2/core/include/Event.h"
#include "UHH2/common/include/Utils.h"
#include "UHH2/common/include/JetIds.h"
#include <math.h>
#include <sstream>

#include "TH1F.h"
#include "TH2D.h"
#include <iostream>

using namespace std;
using namespace uhh2;
using namespace uhh2examples;


TstarToTopMuPDFHists::TstarToTopMuPDFHists(Context & ctx, const string & dirname, bool use_pdf_weights_): Hists(ctx, dirname), use_pdf_weights(use_pdf_weights_){  

is_mc = ctx.get("dataset_type") == "MC";
 //For MLQ reconstruction
  h_hyps = ctx.get_handle<std::vector<TstarReconstructionHypothesis>>("HighMassTstarReconstruction");
  m_discriminator_name ="Chi2";

  double bins_low_NoEle2[11] = {0,350,500,650,800,950,1100,1250,1450,1750,2050};
  double bins_mlq_low2[6] = {0,200,400,600,800,1000};

  for(int i=0; i<100; i++){
    stringstream ss_name;
    ss_name << "M_comb_PDF_"  << i+1 ;
    stringstream ss_title;
    ss_title << "M_{comb} [GeV] for PDF No. "  << i+1 << " out of 100" ;
    
    string s_name = ss_name.str();
    string s_title = ss_title.str();
   
    const char* char_name = s_name.c_str();
    const char* char_title = s_title.c_str();
 
    histo_names[i] = s_name;
 
    book<TH1F>(char_name, char_title, 10,bins_low_NoEle2);
  }

}

void TstarToTopMuPDFHists::fill(const Event & event){
  double weight = event.weight;

  if(is_mc){
   
     
    if(event.muons->size() = 1){   
      std::vector<TstarReconstructionHypothesis> hyps = event.get(h_hyps); 
      const TstarReconstructionHypothesis* hyp = get_best_hypothesis( hyps, m_discriminator_name );

      double mTstarlep_rec = 0;
      double mTstarhad_rec = 0;
      double mTstarmed_rec = 0;


      if( (hyp->Tstarlep_v4()).isTimelike() ) mTstarlep_rec = (hyp->Tstarlep_v4()).M();
      else mTstarlep_rec = sqrt( -(hyp->Tstarlep_v4()).mass2());
      if( (hyp->Tstarhad_v4()).isTimelike() ) mTstarhad_rec = (hyp->Tstarhad_v4()).M();
      else mTstarhad_rec = sqrt( -(hyp->Tstarhad_v4()).mass2());

      mTstarmed_rec = (mTstarhad_rec + mTstarlep_rec) / 2;

      if(event.genInfo->systweights().size()){
	for(int i=0; i<100; i++){
	  if(use_pdf_weights){
	    double pdf_weight = event.genInfo->systweights().at(i+9);
	    double fillweight = weight * pdf_weight/event.genInfo->originalXWGTUP();
	    const char* name3 = histo_names3[i].c_str();
	    hist(name)->Fill(mTstarmed_rec,fillweight);
	  }
	}
      } //systweights filled
    } //Tstar reconstructable

  } //is_mc
}

LQToTopMuPDFHists::~LQToTopMuPDFHists(){}
