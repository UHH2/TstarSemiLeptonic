//bTagMacro.C

void bTagMacro(){

  TFile *s1 = new TFile("/nfs/dust/cms/user/multh/RunII_76X_v1/Selection/CorrectMatch/uhh2.AnalysisModuleRunner.MC.Tstar_M700.root");
 TFile *s2 = new TFile("/nfs/dust/cms/user/multh/RunII_76X_v1/Selection/CorrectMatch/uhh2.AnalysisModuleRunner.MC.Tstar_M800.root");
 TFile *s3 = new TFile("/nfs/dust/cms/user/multh/RunII_76X_v1/Selection/CorrectMatch/uhh2.AnalysisModuleRunner.MC.Tstar_M900.root");
 TFile *s4 = new TFile("/nfs/dust/cms/user/multh/RunII_76X_v1/Selection/CorrectMatch/uhh2.AnalysisModuleRunner.MC.Tstar_M1000.root");
 TFile *s5 = new TFile("/nfs/dust/cms/user/multh/RunII_76X_v1/Selection/CorrectMatch/uhh2.AnalysisModuleRunner.MC.Tstar_M1100.root");
 TFile *s6 = new TFile("/nfs/dust/cms/user/multh/RunII_76X_v1/Selection/CorrectMatch/uhh2.AnalysisModuleRunner.MC.Tstar_M1200.root");
 TFile *s7 = new TFile("/nfs/dust/cms/user/multh/RunII_76X_v1/Selection/CorrectMatch/uhh2.AnalysisModuleRunner.MC.Tstar_M1300.root");
 TFile *s8 = new TFile("/nfs/dust/cms/user/multh/RunII_76X_v1/Selection/CorrectMatch/uhh2.AnalysisModuleRunner.MC.Tstar_M1400.root");
 TFile *s9 = new TFile("/nfs/dust/cms/user/multh/RunII_76X_v1/Selection/CorrectMatch/uhh2.AnalysisModuleRunner.MC.Tstar_M1500.root");
 TFile *s10 = new TFile("/nfs/dust/cms/user/multh/RunII_76X_v1/Selection/CorrectMatch/uhh2.AnalysisModuleRunner.MC.Tstar_M1600.root");


 TH1F *h_signal1    = (TH1F*)s1->Get("corrmatch__HypHists/CSVHad_Signal");
 TH1F *h_signal2    = (TH1F*)s2->Get("corrmatch__HypHists/CSVHad_Signal");
 TH1F *h_signal3    = (TH1F*)s3->Get("corrmatch__HypHists/CSVHad_Signal");
 TH1F *h_signal4    = (TH1F*)s4->Get("corrmatch__HypHists/CSVHad_Signal");
 TH1F *h_signal5    = (TH1F*)s5->Get("corrmatch__HypHists/CSVHad_Signal");
 TH1F *h_signal6    = (TH1F*)s6->Get("corrmatch__HypHists/CSVHad_Signal");
 TH1F *h_signal7    = (TH1F*)s7->Get("corrmatch__HypHists/CSVHad_Signal");
 TH1F *h_signal8    = (TH1F*)s8->Get("corrmatch__HypHists/CSVHad_Signal");
 TH1F *h_signal9    = (TH1F*)s9->Get("corrmatch__HypHists/CSVHad_Signal");
 TH1F *h_signal10   = (TH1F*)s10->Get("corrmatch__HypHists/CSVHad_Signal");


 TH1F* histos_signal[10]={h_signal1,h_signal2,h_signal3,h_signal4,h_signal5,h_signal6,h_signal7,h_signal8,h_signal9,h_signal10};
for (int i=0;i<10;++i){
         histos_signal[i]->Sumw2(); // *Very* Important
        }

TList *list_signal = new TList; 
list_signal->Add(h_signal1); 
list_signal->Add(h_signal2);
list_signal->Add(h_signal3);
list_signal->Add(h_signal4);
list_signal->Add(h_signal5);
list_signal->Add(h_signal6);
list_signal->Add(h_signal7);
list_signal->Add(h_signal8);
list_signal->Add(h_signal9);
list_signal->Add(h_signal10);

TH1F *h_signal = (TH1F*)h_signal1->Clone("h"); 
h_signal->Reset(); 
h_signal->Merge(list_signal); 
 h_signal->Scale(1/h_signal->Integral());
h_signal->Draw();


 TH1F *h_bkg1    = (TH1F*)s1->Get("corrmatch__HypHists/CSVHad_Background");
 TH1F *h_bkg2    = (TH1F*)s2->Get("corrmatch__HypHists/CSVHad_Background");
 TH1F *h_bkg3    = (TH1F*)s3->Get("corrmatch__HypHists/CSVHad_Background");
 TH1F *h_bkg4    = (TH1F*)s4->Get("corrmatch__HypHists/CSVHad_Background");
 TH1F *h_bkg5    = (TH1F*)s5->Get("corrmatch__HypHists/CSVHad_Background");
 TH1F *h_bkg6    = (TH1F*)s6->Get("corrmatch__HypHists/CSVHad_Background");
 TH1F *h_bkg7    = (TH1F*)s7->Get("corrmatch__HypHists/CSVHad_Background");
 TH1F *h_bkg8    = (TH1F*)s8->Get("corrmatch__HypHists/CSVHad_Background");
 TH1F *h_bkg9    = (TH1F*)s9->Get("corrmatch__HypHists/CSVHad_Background");
 TH1F *h_bkg10   = (TH1F*)s10->Get("corrmatch__HypHists/CSVHad_Background");


 TH1F* histos_bkg[10]={h_bkg1,h_bkg2,h_bkg3,h_bkg4,h_bkg5,h_bkg6,h_bkg7,h_bkg8,h_bkg9,h_bkg10};
for (int i=0;i<10;++i){
         histos_bkg[i]->Sumw2(); // *Very* Important
        }

TList *list_bkg = new TList; 
list_bkg->Add(h_bkg1); 
list_bkg->Add(h_bkg2);
list_bkg->Add(h_bkg3);
list_bkg->Add(h_bkg4);
list_bkg->Add(h_bkg5);
list_bkg->Add(h_bkg6);
list_bkg->Add(h_bkg7);
list_bkg->Add(h_bkg8);
list_bkg->Add(h_bkg9);
list_bkg->Add(h_bkg10);

TH1F *h_bkg = (TH1F*)h_bkg1->Clone("h"); 
h_bkg->Reset(); 
h_bkg->Merge(list_bkg); 
 h_bkg->Scale(1/h_bkg->Integral());
 //h_bkg->Draw();


 int size = h_signal->GetNbinsX();
 double Signal[size+1];
 for(int i=1;i<size+1;++i){
   Signal[i] = h_signal->Integral(0,i);

 cout<<"Signal Integral: "<<Signal[i]<<endl;
 }

 double Background[size+1];
 for(int i=1;i<size+1;++i){
   Background[i] = h_bkg->Integral(i,size);

 cout<<"Background Integral: "<<Background[i]<<endl;
 }

 for(int i=1;i<size+1;++i){
 cout<<"Ratio: "<<+2*log(Signal[i])-2*log(Background[i])<<endl;
 }


}
